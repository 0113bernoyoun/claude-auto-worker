# Claude Auto Worker - Cursor Development Rules

## 🚀 프로젝트 개요
- **프로젝트명**: claude-auto-worker
- **설명**: 차세대 Claude Code 자동화 도구 - 안전하고, 유연하고, 확장 가능한 워크플로우 엔진
- **기술 스택**: NestJS, Next.js, TypeScript, Node.js

## 🔧 핵심 설정
- **포트**: 5849 (기본값)
- **API 엔드포인트**: http://localhost:5849/api
- **개발 서버**: http://localhost:5849
- **빌드 출력**: ./dist

## 📁 프로젝트 구조
```
claude-auto-worker/
├── src/
│   ├── app.module.ts          # 루트 모듈
│   ├── app.controller.ts      # 루트 컨트롤러
│   ├── app.service.ts         # 루트 서비스
│   ├── main.ts               # 애플리케이션 진입점
│   ├── core/                 # 핵심 기능 모듈
│   ├── cli/                  # CLI 관련 모듈
│   ├── dashboard/            # Next.js 대시보드
│   ├── git/                  # Git 통합 모듈
│   ├── parser/               # 파싱 관련 모듈
│   ├── shared/               # 공유 유틸리티
│   └── config/               # 설정 모듈
├── tests/                    # 테스트 파일들
├── docs/                     # 문서
└── tools/                    # 개발 도구
```

## 📚 핵심 문서 참조 가이드

### 🎯 PRD (Product Requirements Document)
**파일**: `PRD_Claude_Workflow_Engine.md`
**목적**: 제품 요구사항 및 기능 명세
**주요 내용**:
- 제품 목표: 안전한 자동화, 맥락 & 사용성 보완, 확장성 확보
- 핵심 기능: 자동화 실행, 워크플로 정의(DSL), 품질 보증 & 안전장치
- UI/UX 전략: CLI → 웹 대시보드 → VS Code Extension 단계적 확장
- **참조 시기**: 기능 요구사항 확인, 사용자 스토리 작성, 우선순위 결정

### 🔧 TRD (Technical Requirements Document)
**파일**: `TRD_Claude_Workflow_Engine.md`
**목적**: 기술적 구현 방법 및 아키텍처 설계
**주요 내용**:
- 시스템 구성: CLI → Core Engine → Claude API
- 주요 컴포넌트: CLI 모듈, Workflow Executor, DSL Parser, Git Integration
- 기술 스택: NestJS, TypeScript, Next.js, TailwindCSS
- **참조 시기**: 아키텍처 설계, 기술적 구현 방법 결정, 모듈 구조 설계

### 📋 DEVELOPMENT_TASKS
**파일**: `DEVELOPMENT_TASKS.md`
**목적**: 개발 태스크 목록 및 진행 상황 관리
**주요 내용**:
- 총 72개 태스크, 8개 스프린트로 구성
- 우선순위별 분류: 높음(🔴) 24개, 보통(🟡) 32개, 낮음(🟢) 16개
- 스프린트별 상세 계획 및 의존성 관계
- **참조 시기**: 다음 작업 결정, 우선순위 설정, 의존성 확인, 진행 상황 파악

### 📊 PROJECT_STATUS
**파일**: `PROJECT_STATUS.md`
**목적**: 프로젝트 전체 진행 상황 및 로드맵
**주요 내용**:
- 현재 상황 요약 및 완료된 작업 목록
- 4단계 개발 로드맵 (주차별 상세 계획)
- 각 단계별 목표 및 주요 마일스톤
- **참조 시기**: 프로젝트 전체 상황 파악, 다음 단계 계획, 마일스톤 확인

## 🎯 개발 가이드라인

### NestJS 모듈 생성 시
- 모든 모듈은 `@Module()` 데코레이터 사용
- 의존성 주입을 위한 `@Injectable()` 데코레이터 사용
- 컨트롤러는 `@Controller()` 데코레이터 사용

### 포트 사용
- **항상 포트 5849를 기본값으로 사용**
- 환경변수 `PORT`로 오버라이드 가능
- 다른 포트 사용 시 반드시 문서화

### API 설계
- 모든 API 엔드포인트는 `/api` 프리픽스 사용
- RESTful API 설계 원칙 준수
- 적절한 HTTP 상태 코드 사용

### TypeScript 설정
- strict 모드 활성화
- 데코레이터 메타데이터 활성화
- 경로 별칭 사용 (`@/*`, `@shared/*`, `@core/*` 등)

## 🔍 프롬프트 진행 시 문서 참조 규칙

### 1. 기능 개발 시
- **PRD 참조**: 요구사항 및 기능 명세 확인
- **TRD 참조**: 기술적 구현 방법 및 아키텍처 확인
- **TASKS 참조**: 관련 태스크 및 우선순위 확인

### 2. 아키텍처 설계 시
- **TRD 참조**: 시스템 구성 및 컴포넌트 설계
- **STATUS 참조**: 현재 개발 단계 및 로드맵 확인
- **TASKS 참조**: 관련 개발 태스크 및 의존성 확인

### 3. 다음 작업 결정 시
- **STATUS 참조**: 현재 진행 상황 및 다음 단계 확인
- **TASKS 참조**: 우선순위별 태스크 목록 및 의존성 확인
- **PRD 참조**: 제품 목표 및 핵심 기능 우선순위 확인

### 4. 코드 리뷰 및 품질 관리 시
- **PRD 참조**: 기능 요구사항 및 품질 기준 확인
- **TRD 참조**: 기술적 구현 표준 및 아키텍처 원칙 확인
- **TASKS 참조**: 관련 테스트 및 검증 태스크 확인

## 🚨 주의사항
- 포트 5849는 이 프로젝트 전용으로 예약됨
- 다른 프로젝트와 포트 충돌 시 환경변수 `PORT` 사용
- 모든 API 변경사항은 문서화 필수
- **문서 참조 없이 주요 결정 금지**: 항상 관련 문서들을 확인하여 일관성 유지
 - **문서/상태 파일 업데이트는 PR 머지 시에만 수행**: `dev-notes/`, `PROJECT_STATUS.md`, `README.md`, `DEVELOPMENT_TASKS.md` 등 문서/상태 파일의 생성·수정은 오직 PR이 머지된 이후에만 수행한다. TASK 완료(또는 진행 중)만으로는 해당 파일들을 자동 수정하지 않는다.

### 텍스트/인코딩 및 네이밍 규칙 (깨짐 방지)
- 인코딩은 항상 UTF-8을 사용한다. 터미널/에디터/CI 환경변수(`LANG`, `LC_ALL`)도 UTF-8로 고정한다.
- 파일명은 ASCII(영문 소문자, 숫자, 대시`-`, 언더스코어`_`)만 사용한다. 한글/이모지/공백/특수문자는 금지한다.
- 브랜치명/태그/패키지명 등 식별자에도 이모지/비-ASCII 문자를 사용하지 않는다.
- 커밋/PR/리뷰의 긴 본문은 셸 인용 이슈를 피하기 위해 파일로 작성해 전달한다. 예: `gh pr create -F .github/pr-body.md`
- 셸 here-doc 사용 시 반드시 따옴표 있는 heredoc을 사용한다: `<<'EOF'` 형태.
- `dev-notes/` 등 문서 파일명도 ASCII 규칙을 따른다. 머지 후 생성 시에도 동일하게 적용한다.

## 🔧 개발 도구 및 워크플로우

### GitHub CLI 사용
- **항상 GitHub CLI (`gh`)를 사용하여 저장소 관리**
- `gh repo create` - 새 저장소 생성
- `gh repo clone` - 저장소 클론
- `gh repo view` - 저장소 정보 확인
- `gh pr create` - Pull Request 생성
- `gh issue create` - 이슈 생성
- `gh workflow run` - GitHub Actions 워크플로우 실행

### Pull Request 워크플로우
- **새로운 기능/수정 시 반드시 새 브랜치 생성**
- `git checkout -b feature/기능명` 또는 `git checkout -b fix/수정명`
- 작업 완료 후 `gh pr create`로 Pull Request 생성
- **main 브랜치에 직접 커밋 금지**
- PR 리뷰 후 merge 진행

### Agent 디렉토리 활용
- **AI Agent 관련 파일들은 `agent/` 디렉토리에 배치**
- 새로운 AI Agent 생성 시: `agent/agent-name.md` 형식으로 작성
- 기존 Agent 파일 수정 시: `agent/` 디렉토리 내에서 작업
- Agent 간 협업 시: `agent/` 디렉토리 내 파일들을 참조하여 통합

### 머지 후 문서 업데이트 (수동 자동화)
- 문서 업데이트 트리거는 **PR 머지**뿐이다. TASK 완료만으로는 문서/상태 파일을 업데이트하지 않는다.
- 이 채팅에서 사용자가 "PR 머지됨" 또는 "머지 처리" 지시를 내리면, 별도 스크립트나 GitHub Actions 없이 에이전트가 즉시 다음을 수행한다.
  - **dev-notes**: `dev-notes/[작업ID]-완료-문서.md` 생성/갱신 (작업ID는 `TASK-\d{3}` 규칙으로 PR 제목/본문에서 추출)
  - **프로젝트 상태**: `PROJECT_STATUS.md` 갱신 (요구 문서명 `status.md`에 해당)
  - **README 진행상황**: `README.md`에 최신 머지 이력/진행상황 반영
  - **태스크 완료 표시**: `DEVELOPMENT_TASKS.md`에서 해당 작업 체크 처리 (요구 문서명 `tasks.md`에 해당)
- 브랜치/PR 규칙: 항상 새 브랜치에서 작업 → PR 생성 → 리뷰 후 머지. `main` 직접 커밋 금지
- 저장소 관리는 **GitHub CLI(`gh`)**를 우선 사용한다. (예: `gh pr create`, `gh pr merge --merge`)
- 자동화는 이 프롬프트 내에서 에이전트가 직접 파일을 수정/커밋/푸시하여 반영한다. (CI 의존 없음)

### PR/리뷰/문서 작성 규칙 (가독성·시각 요소 강화)
- 목적: 모든 PR/코멘트/문서는 읽는 사람이 빠르게 핵심을 파악하고, 시각적으로 정돈된 정보를 얻도록 한다.
- 이모지 사용: 본문 콘텐츠(요약/섹션 제목/체크리스트/하이라이트)에는 이모지 사용 권장. 단, 파일명·브랜치명·태그·패키지명 등 식별자에는 이모지/비-ASCII 금지(위 규칙 유지).
- 마크다운 구성요소 적극 활용: 제목(###), 목록, 체크리스트, 표, 코드펜스, 인라인 코드, 인용, 구분선. 필요 시 접기(<details>) 사용.

- PR 본문 필수 섹션(권장 템플릿)
  - 제목: 타입/스코프 + 요약 + `(TASK-XXX)`
  - 요약(What) ✨: 이번 변경의 핵심 포인트를 3~6줄로. 핵심에는 굵게 처리.
  - 배경/이유(Why) 🧭: 문제/맥락/목표.
  - 변경사항(Changes) 🛠️: 디렉토리/주요 파일·모듈 단위로 정리.
  - 스크린샷/로그/CLI 출력(선택) 🖼️: 코드펜스 또는 이미지. 민감정보 금지.
  - 테스트(How verified) ✅: 수행 명령, 결과 요약, 커버리지/주요 시나리오.
  - 영향도/리스크 🎯: 런타임/성능/마이그레이션/보안 고려.
  - 롤아웃/롤백 🚀: 배포 방법, 롤백 방법.
  - 체크리스트 ☑️: 빌드/테스트/린트/문서/호환성 등.
  - 참고 링크 🔗: 이슈/문서/결정 기록.
  - 규칙: `gh pr create -F <file>`로 UTF-8 파일 기반 본문 제출.

- 코드리뷰 코멘트 규칙
  - 전체 평(Overall) 🧾: 머지 가능 여부(Ready to merge / Needs changes / Blocking) 명시.
  - 잘한 점(Highlights) 🌟: 구체적 장점/개선 포인트.
  - 이슈 분류(Severity) 🧩:
    - Major: 반드시 수정 필요(기능/안전/아키텍처 영향)
    - Minor: 권장 수정(품질/유지보수성)
    - Nit: 사소한 스타일/표현
  - 액션 아이템 목록(Action items) 📝: 체크박스 형태로 명확히.
  - 제안 코드(선택) 💡: 사소한 경우 코드블록으로 바로 제안.
  - 톤과 형식: 간결·구체·검증 가능. 이모지 허용, 과도한 장식 금지.

- 문서(README/dev-notes/status/tasks) 작성 규칙
  - 구조: 요약 → 배경 → 상세 → 예시/스니펫 → 체크리스트 → 참고.
  - 시각 요소: 섹션 이모지/표/리스트로 가독성 강화. 다만 파일명은 ASCII만.
  - 다이어그램: 필요 시 Mermaid/아스키 다이어그램 등 텍스트 기반만 사용.
  - 인코딩: UTF-8 고정. 긴 본문은 파일로 작성 후 참조.

## 📝 코드 예시

### 기본 컨트롤러 구조
```typescript
import { Controller, Get } from '@nestjs/common';

@Controller('example')
export class ExampleController {
  @Get()
  findAll(): string {
    return 'This action returns all examples';
  }
}
```

### 기본 서비스 구조
```typescript
import { Injectable } from '@nestjs/common';

@Injectable()
export class ExampleService {
  findAll(): string[] {
    return ['example1', 'example2'];
  }
}
```

### 환경변수 설정
```typescript
// .env 파일
PORT=5849
NODE_ENV=development
```

## 🔍 디버깅 및 테스트
- `npm run start:dev`: 개발 모드 실행 (포트 5849)
- `npm run build`: 프로덕션 빌드
- `npm run test`: 단위 테스트 실행
- `npm run test:e2e`: E2E 테스트 실행

## 📚 참고 자료
- NestJS 공식 문서: https://docs.nestjs.com/
- TypeScript 핸드북: https://www.typescriptlang.org/docs/
- 프로젝트 문서: ./docs/ 디렉토리
- **핵심 문서**: PRD, TRD, DEVELOPMENT_TASKS, PROJECT_STATUS 파일들
